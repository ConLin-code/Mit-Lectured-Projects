#Implement three different search algorithms: linear search, binary search, and jump search.
#Create a function that generates a sorted list of random integers of a specified size.
#Implement functions to measure the execution time of each search algorithm for different input sizes (e.g., 100, 1000, 10000 elements).
#Create a function that counts the number of comparisons made by each search algorithm.
#Implement a function that estimates the Big O complexity of each algorithm based on the number of comparisons for different input sizes.
#Create a main function that:
#Allows the user to choose a search algorithm
#Prompts for the size of the input and the element to search for
#Runs the chosen algorithm and displays:The execution time
#Generate a report that compares the efficiency of the three search algorithms in terms of:
#Execution time for different input sizes
#Number of comparisons made
#Estimated Big O complexity
#Implement error handling for invalid inputs.
#Add appropriate comments to explain your code, especially focusing on how you're analyzing the Big O complexity of each algorithm.
#Include a brief written analysis comparing the theoretical Big O complexity of each algorithm with your experimental results.






import random
import math
import time

# Generate sorted list of random integers
def generate_sorted_list(size):
    if size <= 0:
        raise ValueError("Size must be a positive integer.")
    return sorted(random.sample(range(size * 10), size))

# Linear Search
def linear_search(arr, target):
    comparisons = 0
    for i, num in enumerate(arr):
        comparisons += 1
        if num == target:
            return i, comparisons
    return -1, comparisons

# Binary Search (assumes arr is sorted)
def binary_search(arr, target):
    comparisons = 0
    left, right = 0, len(arr) - 1
    while left <= right:
        comparisons += 1
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid, comparisons
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1, comparisons

# Jump Search (assumes arr is sorted)
def jump_search(arr, target):
    comparisons = 0
    length = len(arr)
    step = int(math.sqrt(length))
    prev = 0

    while prev < length and arr[min(step, length) - 1] < target:
        comparisons += 1
        prev = step
        step += int(math.sqrt(length))
        if prev >= length:
            return -1, comparisons

    for i in range(prev, min(step, length)):
        comparisons += 1
        if arr[i] == target:
            return i, comparisons
    return -1, comparisons

# Time a search function
def time_search(func, arr, target):
    start = time.time()
    _, comparisons = func(arr, target)
    end = time.time()
    return end - start, comparisons

# Estimate Big O complexity using comparisons and size ratios
def estimate_order(size_list, comparisons_list):
    ratios = []
    for i in range(1, len(size_list)):
        if comparisons_list[i-1] == 0:
            continue
        ratio = comparisons_list[i] / comparisons_list[i-1]
        size_ratio = size_list[i] / size_list[i - 1]
        if size_ratio > 1:
            order = math.log(ratio) / math.log(size_ratio)
            ratios.append(order)
    return sum(ratios) / len(ratios) if ratios else 0

# Main CLI
def main():
    algorithms = {
        "1": ("Linear Search", linear_search),
        "2": ("Binary Search", binary_search),
        "3": ("Jump Search", jump_search)
    }

    print("\n--- Search Algorithm Efficiency Analyzer ---")
    for key, (name, _) in algorithms.items():
        print(f"{key}. {name}")

    choice = input("Choose a search algorithm (1-3): ")
    if choice not in algorithms:
        print("Invalid choice.")
        return

    try:
        size = int(input("Enter the size of the input list (e.g., 100, 1000, 10000): "))
        target = int(input("Enter the element to search for: "))
        arr = generate_sorted_list(size)
    except ValueError as e:
        print(f"Error: {e}")
        return

    name, algo = algorithms[choice]
    print(f"\nRunning {name}...")
    exec_time, comparisons = time_search(algo, arr, target)
    print(f"Execution time: {exec_time:.6f} seconds")
    print(f"Comparisons made: {comparisons}")

    # Generate comparison report
    print("\n--- Comparative Report (Sizes: 100, 1000, 10000) ---")
    sizes = [100, 1000, 10000]
    for key, (name, algo) in algorithms.items():
        print(f"\n{name}:")
        comparison_counts = []
        for sz in sizes:
            sample = generate_sorted_list(sz)
            _, comps = algo(sample, sample[sz // 2])
            comparison_counts.append(comps)
            print(f"  Size: {sz}, Comparisons: {comps}")
        estimated_order = estimate_order(sizes, comparison_counts)
        print(f"  Estimated Big O (from comparisons): O(n^{estimated_order:.2f})")

# Call main function
if __name__ == "__main__":
    main()
